name: Freshness (manual export + runtime ms.date check)

on:
  workflow_dispatch:
  push:
    paths:
      - 'data/engagement-latest.xlsx'

permissions:
  contents: write
  pull-requests: write

env:
  TARGET_BRANCH: main
  WORKING_BRANCH_PREFIX: chore/freshness
  DOCSET_ROOT: powerbi-docs
  REPORT_XLSX: data/engagement-latest.xlsx
  STALE_FILE_LIST: tools/stale-files.txt
  BATCH_LIMIT: "50"
  FRESH_WINDOW_DAYS: "365"
  PR_LABELS: "freshness,automation,doc-hygiene"

jobs:
  freshness:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install pandas openpyxl python-dateutil pyyaml

      - name: Generate stale batch from XLSX + runtime ms.date check
        run: |
          python tools/generate-stale-list.py \
            --input "${{ env.REPORT_XLSX }}" \
            --output "${{ env.STALE_FILE_LIST }}" \
            --docroot "${{ env.DOCSET_ROOT }}" \
            --limit "${{ env.BATCH_LIMIT }}" \
            --fresh-window-days "${{ env.FRESH_WINDOW_DAYS }}"

      - name: Show batch
        run: |
          echo "Files to process:"
          cat "${{ env.STALE_FILE_LIST }}" || true
          echo ""
          echo "Summary:"
          head -n 10 "${{ env.STALE_FILE_LIST }}.summary.csv" || true
          echo ""
          echo "Skipped:"
          head -n 10 "${{ env.STALE_FILE_LIST }}.skipped.csv" || true

      - name: Run DocuMentor passes (placeholder)
        run: |
          if [ ! -s "${{ env.STALE_FILE_LIST }}" ]; then
            echo "No files selected; skipping DocuMentor."
            exit 0
          fi
          while IFS= read -r f; do
            [ -z "$f" ] && continue
            echo "→ DocuMentor on $f"
            # Replace with your real CLI commands:
            # ./documentor fix --file "$f" --rules "learn-markdown,frontmatter"
            # ./documentor optimize --file "$f" --prompts "seo,geo"
          done < "${{ env.STALE_FILE_LIST }}"

      # Generate a date label we can reuse for branch naming
      - name: Meta
        id: meta
        shell: bash
        run: echo "label=$(date -u +'%Y%m%d')" >> "$GITHUB_OUTPUT"

      # OPTIONAL: Show if there are any changes. If not, skip PR
      - name: Detect changes
        id: detect
        shell: bash
        run: |
          if git status --porcelain | grep -q .; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
      # Create a PR FROM your fork TO upstream (no push to upstream branches)
      - name: Open PR from fork (JulCsc)
        if: ${{ steps.detect.outputs.changed == 'true' }}
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.FORK_PR_TOKEN }}                 # PAT for your fork
          push-to-fork: JulCsc/powerbi-docs-pr              # <-- e.g., JulCsc/powerbi-docs-pr
          branch: ${{ env.WORKING_BRANCH_PREFIX }}/${{ steps.meta.outputs.label }}
          base: ${{ env.TARGET_BRANCH }}                     # upstream base branch (e.g., main)
          title: "Freshness: automated pass (forked PR) – ${{ steps.meta.outputs.label }}"
          labels: ${{ env.PR_LABELS }}
          commit-message: "Freshness automation (runtime ms.date check + DocuMentor)"
          author: "docs-automation <docs-automation@users.noreply.github.com>"
          committer: "docs-automation <docs-automation@users.noreply.github.com>"
          signoff: false
          draft: false
          body: |
            This PR was generated by the freshness workflow.

            **What happened**
            - Built a batch from the engagement export/report
            - Re-checked each file’s current **ms.date**; skipped those already fresh
            - Ran DocuMentor passes (if configured)

            **Run artifacts**
            - Processed: `${{ env.STALE_FILE_LIST }}`
            - Summary:   `${{ env.STALE_FILE_LIST }}.summary.csv`
            - Skipped:   `${{ env.STALE_FILE_LIST }}.skipped.csv`

      # Optional: comment when there were no changes (for visibility)
      - name: No-op note
        if: ${{ steps.detect.outputs.changed != 'true' }}
        run: echo "No changes detected; skipping PR creation."